---
layout: post
title: "DevOps Toolbox: Vagrant/Veewee Installation"
published: true
created:  1348845433
tags: [devops, vagrant, veewee, virtualbox, chef, opscode, knife, ec2, rackspace]
categories: [DevOps Toolbox]
permalink: /devops-toolbox/vagrant-veewee-installation
---

h1. Install Vagrant/Veewee

"Vagrant":http://vagrantup.com/ is used to create/manage machine images using VirtualBox (and soon, other VMs as well). "Veewee":https://github.com/jedi4ever/veewee is a vagrant plugin used to define and create the base boxes that Vagrant loads into VirtualBox. Both are Ruby Gems that will be installed using a @Gemfile@ and @bundler@. We will use these again lter to install various Chef related utilities.

# "Create a Gemfile":#GEMFILE
# "Install Required Gems":#BUNDLEINSTALL
# "Commit Our Work":#COMMIT

h2(#GEMFILE). Create a Gemfile

First, we need to create a Gemfile in the project directory. This file tells Ruby what gems we need to install for this project and also what versions we've used successfully.

In your favorite editor, create and open @Gemfile@ add the following lines to it and save.

{% highlight ruby linenos %}
source :rubygems

gem 'vagrant'
gem 'veewee'
{% endhighlight %}

bq. *From the top:* Line 1 tells ruby (specifically @bundler@) where to try and download gems from, in this case "rubygems.org". Lines 3-4 tell @bundler@ to install the @vagrant@ and @veewee@ gems.

h2(#BUNDLEINSTALL). Install Required Gems

Next, to install the gems we need, run @bundle install@:

{% highlight sh linenos %}
$ bundle install
Fetching gem metadata from http://rubygems.org/......
Installing Platform (0.4.0) WARNING: Platform-0.4.0 has an invalid nil value for @cert_chain

Installing archive-tar-minitar (0.5.2) 
Installing builder (3.0.0) 
Installing ffi (1.0.11) with native extensions 
Installing childprocess (0.3.5) 
Installing diff-lcs (1.1.3) 
Installing json (1.5.4) with native extensions 
Installing gherkin (2.11.2) with native extensions 
Installing cucumber (1.2.1) 
Installing erubis (2.7.0) 
Installing highline (1.6.14) 
Installing i18n (0.6.1) 
Installing log4r (1.1.10) 
Installing net-ssh (2.2.2) 
Installing net-scp (1.0.4) 
Installing open4 (1.3.0) 
Installing popen4 (0.1.2) 
Installing progressbar (0.11.0) 
Installing rspec-core (2.11.1) 
Installing rspec-expectations (2.11.2) 
Installing rspec-mocks (2.11.2) 
Installing rspec (2.11.0) 
Installing thor (0.14.6) 
Installing vagrant (1.0.5) 
Installing virtualbox (0.9.2) 
Installing veewee (0.2.3) 
Using bundler (1.1.5) 
Your bundle is complete! Use `bundle show [gemname]` to see where a bundled gem is installed.
{% endhighlight %}

After running @bundle install@, you should now have one _new_ file in your project directory:

{% highlight sh linenos %}
$ git status
# On branch master
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	Gemfile
#	Gemfile.lock
nothing added to commit but untracked files present (use "git add" to track)
{% endhighlight %}

@Gemfile.lock@ now contains the versions of the gems that were installed. When another person bundles @bundle install@ on their machine, they will have the same versions installed.

{% highlight sh linenos %}
cat Gemfile.lock
GEM
  remote: http://rubygems.org/
  specs:
    Platform (0.4.0)
    archive-tar-minitar (0.5.2)
    builder (3.1.3)
    childprocess (0.3.5)
      ffi (~> 1.0, >= 1.0.6)
    cucumber (1.2.1)
      builder (>= 2.1.2)
      diff-lcs (>= 1.1.3)
      gherkin (~> 2.11.0)
      json (>= 1.4.6)
    diff-lcs (1.1.3)
    erubis (2.7.0)
    ffi (1.0.11)
    gherkin (2.11.2)
      json (>= 1.4.6)
    highline (1.6.15)
    i18n (0.6.1)
    json (1.5.4)
    log4r (1.1.10)
    net-scp (1.0.4)
      net-ssh (>= 1.99.1)
    net-ssh (2.2.2)
    open4 (1.3.0)
    popen4 (0.1.2)
      Platform (>= 0.4.0)
      open4 (>= 0.4.0)
    progressbar (0.11.0)
    rspec (2.11.0)
      rspec-core (~> 2.11.0)
      rspec-expectations (~> 2.11.0)
      rspec-mocks (~> 2.11.0)
    rspec-core (2.11.1)
    rspec-expectations (2.11.3)
      diff-lcs (~> 1.1.3)
    rspec-mocks (2.11.3)
    thor (0.14.6)
    vagrant (1.0.5)
      archive-tar-minitar (= 0.5.2)
      childprocess (~> 0.3.1)
      erubis (~> 2.7.0)
      i18n (~> 0.6.0)
      json (~> 1.5.1)
      log4r (~> 1.1.9)
      net-scp (~> 1.0.4)
      net-ssh (~> 2.2.2)
    veewee (0.2.3)
      cucumber (>= 1.0.0)
      highline (~> 1.6.1)
      net-ssh (>= 2.1.0)
      popen4 (~> 0.1.2)
      progressbar
      rspec (~> 2.5)
      thor (~> 0.14.6)
      vagrant (>= 0.9.0)
      virtualbox (>= 0.9.2)
    virtualbox (0.9.2)
      ffi (~> 1.0.9)

PLATFORMS
  ruby

DEPENDENCIES
  vagrant
  veewee
{% endhighlight %}

h2(#COMMIT). Commit Our Work

Let get into the habit and commit our work to the git repository:

{% highlight sh linenos %}
$ git add .
$ git commit -m "Installed vagrant/veewee"
[master 67dd65f] Installed vagrant/veewee
 2 files changed, 71 insertions(+)
 create mode 100644 Gemfile
 create mode 100644 Gemfile.lock
{% endhighlight %}

h2. To Continue...

# "Introduction":../introduction/ - Introduction
# "Installing Prerequisites":../prerequisites/ - XCode, CommandLineTools, Homebrew, RVM, Ruby, and VirtualBox
# "Project Setup":../project-setup/ - Create the git repository and directory structure for Vagrant, Chef, etc.
# "Vagrant/Veewee Installation":../vagrant-veewee-installation/ - Install Vagrant/Vewee to create/control VirtualBox machines
# "Define/Create a Vagrant Box":../define-create-vagrant-box/ - Define and Create a Vagrant Box for use i VirtualBox
# "Provisioning Machines with Vagrant":../provisioning-machines-with-vagrant/ - Provision a cluster (Web/DB) of machines using Vagrant
# "Configuring Machines Using Chef Solo":../configuring-machines-using-chef-solo/ - Configuring our new machine instances using Chef Solo
# "Customizing Recipes for Our Application":../customizing-recipes-for-our-application/ - Customize the recipes we have to prepare for our application deployment
# "Create and Deploy a Rails Applications":../create-deploy-rails-application/ - Create a simple Rails application and deploy it to our Vagrant instances
# "Migrate from Chef Solo to Hosted Chef":../migrate-to-hosted-chef/ - Migrate from using Chef Solo to hosted Chef at OpsCode
# "Migrate Servers to RackCloud":../migrate-to-rackcloud/  - Migrate your servers from VirtualBox to "The Cloud" using Rackspace.
